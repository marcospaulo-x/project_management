import streamlit as st
import pandas as pd
import os
from google.oauth2.service_account import Credentials

def get_gcp_credentials():
    return Credentials.from_service_account_info(
        {
            "type": "service_account",
            "project_id": st.secrets["gcp"]["project_id"],
            "private_key_id": st.secrets["gcp"]["private_key_id"],
            "private_key": st.secrets["gcp"]["private_key"],
            "client_email": st.secrets["gcp"]["client_email"],
            "client_id": st.secrets["gcp"]["client_id"],
            "auth_uri": "https://accounts.google.com/o/oauth2/auth",
            "token_uri": "https://oauth2.googleapis.com/token",
            "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
            "client_x509_cert_url": st.secrets["gcp"]["client_x509_cert_url"]
        }
    )

st.set_page_config(page_title="Backoffice - Acompanhamento de HUs", layout="centered")
CSV_FILE = "./hus.csv"

# Fun√ß√£o para carregar as HUs do arquivo CSV
def load_hus():
    if os.path.exists(CSV_FILE):
        return pd.read_csv(CSV_FILE).to_dict(orient="records")
    return []

# Fun√ß√£o para salvar as HUs no arquivo CSV
def save_hus(hus):
    pd.DataFrame(hus).to_csv(CSV_FILE, index=False)

# Carregar HUs ao iniciar
st.session_state.hus = load_hus()

st.title("üìå Acompanhamento de HUs e Aprova√ß√£o")

# Formul√°rio para adicionar HUs
with st.form("nova_hu"):
    hu_id = st.text_input("ID da HU")
    descricao = st.text_area("Descri√ß√£o da HU")
    link_confluence = st.text_input("Link do Confluence")
    submit = st.form_submit_button("Adicionar HU")

    if submit:
        if hu_id and descricao and link_confluence:
            link_aprovacao = f"http://localhost:8502/?id={hu_id}"
            nova_hu = {
                "ID": hu_id,
                "Descri√ß√£o": descricao,
                "Link Confluence": link_confluence,
                "Link Aprova√ß√£o": link_aprovacao,
                "Status": "Pendente",
                "Observa√ß√£o": ""
            }
            st.session_state.hus.append(nova_hu)
            save_hus(st.session_state.hus)
            st.success("‚úÖ HU adicionada com sucesso!")
        else:
            st.error("‚ö†Ô∏è Todos os campos s√£o obrigat√≥rios!")

# Exibi√ß√£o das HUs cadastradas
st.write("## üìú Hist√≥rias de Usu√°rio Cadastradas")
if st.session_state.hus:
    for hu in st.session_state.hus:
        st.write(f"**ID:** {hu['ID']}")
        st.write(f"**Descri√ß√£o:** {hu['Descri√ß√£o']}")
        st.markdown(f"[üîó Link Confluence]({hu['Link Confluence']})")
        st.markdown(f"[üìù Link para Aprova√ß√£o]({hu['Link Aprova√ß√£o']})")
        st.write(f"**Status:** {hu['Status']}")
        st.write("---")
else:
    st.info("Nenhuma HU cadastrada ainda.")
